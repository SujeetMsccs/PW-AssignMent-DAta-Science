Q1. Explain Class and Object with respect to Object-Oriented Programming. Give a suitable example.




     In object-oriented programming, a class is a blueprint or template for creating objects that encapsulate data (known as attributes) and behavior (known as methods).
     An object, on the other hand, is an instance of a class - it is a specific realization of the class that contains its own values for the attributes defined by the 
     class.

     Here's an example to illustrate the concept of class and object in Python:
     
     
     
     
     class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")

      # Creating objects of Person class
      person1 = Person("Alice", 25)
      person2 = Person("Bob", 30)

      # Calling the greet method on each object
      person1.greet()  # Output: Hello, my name is Alice and I am 25 years old.
      person2.greet()  # Output: Hello, my name is Bob and I am 30 years old.
      
      
 Q2. Name the four pillars of OOPs.
 
 
     The four pillars of Object-Oriented Programming (OOPs) are:

        Encapsulation: the practice of bundling data (attributes) and methods (behavior) together within a class to restrict access to the inner
        workings of the object and to protect it from outside interference.
        
        Abstraction: the process of hiding complex implementation details and providing a simplified interface for the user to interact with.
        
        Inheritance: the mechanism by which one class (the child or derived class) acquires the properties and behaviors of another class (the parent or base class).
        
        Polymorphism: the ability of an object to take on many forms or have many behaviors depending on the context in which it is used.
        This is often achieved through method overriding and method overloading
        
Q3. Explain why the __init__() function is used. Give a suitable example.


        The __init__() function is a special method in Python that is automatically called when an object of a class is created. 
        It is used to initialize the attributes of the object and perform any other setup tasks that need to be done before the object can be used.

        Here's an example to illustrate the use of __init__() function in Python:
        
        
        class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

      # Creating an object of Rectangle class
      rectangle1 = Rectangle(5, 3)

    # Calling the area method on the object
    print(rectangle1.area())  
    
    Output: 15
    
    
Q4. Why self is used in OOPs?

     
     
     self is used in OOPs as a reference to the instance of the class being accessed or modified within the methods of that class. 
     It is used to differentiate between class attributes and instance attributes, to allow for code reuse, and to modify the attributes of an object.
     
     
Q5. What is inheritance? Give an example for each type of inheritance.

          {
   "cell_type": "markdown",
   "id": "5c199463",
   "metadata": {},
   "source": [
    "# Ans\n",
    "\n",
    "The method overriding in Python means creating two methods with the same name but differ in the programming logic. The concept of Method overriding allows us to change or override the Parent Class function in the Child Class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b335ff7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inside Parent\n",
      "Inside Child\n"
     ]
    }
   ],
   "source": [
    "# Defining parent class\n",
    "class Parent1():\n",
    "      \n",
    "    # Constructor\n",
    "    def __init__(self):\n",
    "        self.value = \"Inside Parent\"\n",
    "          \n",
    "    # Parent's show method\n",
    "    def show(self):\n",
    "        print(self.value)\n",
    "          \n",
    "# Defining child class\n",
    "class Child(Parent1):\n",
    "      \n",
    "    # Constructor\n",
    "    def __init__(self):\n",
    "        self.value = \"Inside Child\"\n",
    "          \n",
    "    # Child's show method\n",
    "    def show(self):\n",
    "        print(self.value)\n",
    "        \n",
    "# Driver's code\n",
    "obj1 = Parent()\n",
    "obj2 = Child()\n",
    "  \n",
    "obj1.show()\n",
    "obj2.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2122d118",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
